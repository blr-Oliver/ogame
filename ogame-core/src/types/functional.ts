export type Supplier<T> = () => T;
export type Consumer<T> = (x: T) => void;
export type BiConsumer<T, E> = (x: T, y: E) => void;
export type Function<T, R> = (x: T) => R;
export type BiFunction<T, E, R> = (x: T, y: E) => R;
export type Predicate<T> = Function<T, boolean>;
export type UnaryOperator<T> = Function<T, T>;
export type BinaryOperator<T> = BiFunction<T, T, T>;
export type BinaryTransform<T, R> = BiFunction<T, T, R>;
export type Comparator<T> = BinaryTransform<T, number>;

export type Async<F extends (...args: any[]) => any> = (...args: Parameters<F>) => Promise<ReturnType<F>>;
export type AsyncSupplier<T> = Async<Supplier<T>>;
export type AsyncConsumer<T> = Async<Consumer<T>>;
export type AsyncBiConsumer<T, E> = Async<BiConsumer<T, E>>;
export type AsyncFunction<T, R> = Async<Function<T, R>>;
export type AsyncBiFunction<T, E, R> = Async<BiFunction<T, E, R>>;
export type AsyncPredicate<T> = Async<Predicate<T>>;
export type AsyncUnaryOperator<T> = Async<UnaryOperator<T>>;
export type AsyncBinaryOperator<T> = Async<BinaryOperator<T>>;
export type AsyncBinaryTransform<T, R> = Async<BinaryTransform<T, R>>;
